---
title: "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of functional and non-function water points in Osub State, Nigeria"
date: "30 Januaury 2023"
date-modified: "r Sys.Date()"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

## 1 Overview

### 1.1 Setting the Scene

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.

### 1.2 Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria.

### 1.3 The Data

#### 1.3.1 Aspatial Data

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

#### 1.3.2 Spatial Data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange portal](https://data.humdata.org/) or [geoBoundaries](https://www.geoboundaries.org/).

### 1.4 The Task

The specific tasks of this take-home exercise are as follows:

##### Exploratory Spatial Data Analysis (ESDA)

-   Derive kernel density maps of functional and non-functional water points. Using appropriate tmap functions,

-   Display the kernel density maps on openstreetmap of Osub State, Nigeria. Describe the spatial patterns revealed by the kernel density maps.

-   Highlight the advantage of kernel density map over point map.

##### Second-order Spatial Point Patterns Analysis

With reference to the spatial point patterns observed in ESDA:

-   Formulate the null hypothesis and alternative hypothesis and select the confidence level.

-   Perform the test by using appropriate Second order spatial point patterns analysis technique.

-   With reference to the analysis results, draw statistical conclusions.

##### Spatial Correlation Analysis

In this section, you are required to confirm statistically if the spatial distribution of functional and non-functional water points are independent from each other.

-   Formulate the null hypothesis and alternative hypothesis and select the confidence level.

-   Perform the test by using appropriate Second order spatial point patterns analysis technique.

-   With reference to the analysis results, draw statistical conclusions.

## 2 Getting Started

The R packages we'll use for this analysis are:

-   **sf**: used for importing, managing, and processing geospatial data

-   **tidyverse**: a collection of packages for data science tasks

-   **tmap**: used for creating thematic maps, such as choropleth and bubble maps

-   **spatstat**: used for point pattern analysis

-   **raster**: reads, writes, manipulates, analyses and models gridded spatial data (e.g. raster-based geographical data)

-   **funModeling**: covers common aspects in predictive modeling (e.g. data cleaning, variable importance analysis and assessing model performance)

-   **sfdep**: performing geospatial data wrangling and local colocation quotient analysis

-   **maptools**: maptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.

```{r}
#pacman::p_load(tmap, tidyverse, sf, funModeling, sfdep, raster)

pacman::p_load(tmap, tidyverse, sf, funModeling, sfdep)
```

## 3 Handling Geospatial Data

### 3.1 Importing Geospatial Data

We will be importing the following geospatial datasets in R by using [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) of sf package:

-   The geoBoundaries Dataset

-   The NGA data set

##### 3.1.1 The geoBoundaries Dataset

```{r}
geoNGA <- st_read("data/geospatial/",
                  layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

##### 3.1.2 The NGA Dataset

```{r}
NGA <- st_read("data/geospatial/",
               layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

By examining both sf dataframe closely, we notice that NGA provide both LGA and state information. Hence, NGA data.frame will be used for the subsequent processing.

### 3.2 Importing Aspatial Data

We will use [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) of readr package to import only water points within Nigeria.

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

##### 3.2.1 Converting water point data into sf point features

Converting an aspatial data into an sf data.frame involves two steps.

First, we need to convert the [wkt](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) field into sfc field by using `st_as_sfc()` data type.

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

Next, we will convert the tibble data.frame into an sf object by using `st_sf()`. It is also important for us to include the referencing system of the data into the sf object.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

##### 3.2.2 Transforming the Nigeria projected coordinate system

We will now transform the projection from wgs84 to an appropriate projected coordinate system of Nigeria.

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

## 4 Data Wrangling for Water Point Data

Exploratory Data Analysis (EDA) is a popular approach to gain initial understanding of the data. In the code chunk below, `freq()` of funModeling package is used to reveal the distribution of water point status visually.

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```

Figure above shows that there are nine classes in the `#status_clean` fields.

Next, code chunk below will be used to perform the following data wrangling tasksP - `rename()` of dplyr package is used to rename the column from `#status_clean` to status_clean for easier handling in subsequent steps. - `select()` of dplyr is used to include status_clean in the output sf data.frame. - `mutate()` and `replace_na()` are used to recode all the NA values in `status_clean` into unknown.

```{r}
wp_sf_nga <- wp_sf %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

### 4.1 Extracting Water Point Data

Now we are ready to extract the water point data according to their status.

The code chunk below is used to extract functional water point.

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract nonfunctional water point.

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

The code chunk below is used to extract water point with unknown status.

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

Next, the code chunk below is used to perform a quick EDA on the derived sf data.frames.

```{r}
freq(data = wp_functional,
     input = 'status_clean')
```

```{r}
freq(data = wp_nonfunctional,
     input = 'status_clean')
```

```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

### 4.2 Performing Point-in-Polygon Count

Next, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using `st_intersects()` of sf package. Next, `length()` is used to calculate the number of functional water points that fall inside each LGA.

```{r}
NGA_wp <- NGA %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```

Notice that four new derived fields have been added into *NGA_wp* sf data.frame.

### 4.3 Visualing attributes by using statistical graphs

In this code chunk below, appropriate functions of [ggplot2](https://ggplot2.tidyverse.org/) package is used to reveal the distribution of total water points by LGA in histogram.

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

## 5 Exploratory Spatial Data Analysis (ESDA)

### 5.1 Basic Choropleth Mapping

##### 5.2.1 Visualising Distribution of Functional Water Point by LGA

```{r}
tmap_mode("view")
p1 <- tm_shape(NGA_wp) +
  tm_fill("wp_functional",
          n = 10,
          style = "equal",
          palette = "Blues") +
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title = "Distribution of functional water point by LGAs",
            legend.outside = FALSE)
p1
```

```{r}
tmap_mode('plot')
```

##### 5.2.2 Visualising Distribution of Functional Water Point by LGA

```{r}
tmap_mode("view")
p2 <- tm_shape(NGA_wp) +
  tm_fill("wp_nonfunctional",
          n = 10,
          style = "equal",
          palette = "Blues") +
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title = "Distribution of nonfunctional water point by LGAs",
            legend.outside = FALSE)
p2
```

```{r}
tmap_mode('plot')
```

### 5.2 Spatial Patterns from Kernel Density Maps

The advantage of kernel density map over point map: - better visualisation - summarises information of small zones compared to other zones

## 6 Second-order Spatial Point Patterns Analysis

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface, using appropriate functions of `spatstat`. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

### 6.1 Spatial Data Wrangling

```{r}
pacman::p_load(maptools, raster, spatstat)
```

##### 6.1.1 Mapping the Geospatial data sets

This step is useful for us to plot a map to show their spatial patterns.

```{r}
tm_shape(wp_nonfunctional)+
  tm_dots()

```

```{r}
tmap_mode('plot')
```

Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying excessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

### 6.2 Geospatial Data Wrangling

##### 6.2.1 Converting sf data frames to sp's Spatial\* class

The code chunk below uses as_Spatial() of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
functional_sp <- as_Spatial(wp_functional)
nonfunctional_sp <- as_Spatial(wp_nonfunctional)
```

```{r}
functional_sp
```

```{r}
nonfunctional_sp
```

Notice that the geospatial data have been converted into their respective sp's Spatial\* classes now.

##### 6.2.2 Converting the generic sp format into spatstat's ppp format

Now, we will use `as.ppp()` function of **spatstat** to convert the spatial data into **spatstat**'s **ppp** object format.

```{r}
functional_ppp <-as(functional_sp, "ppp")
functional_ppp
```

```{r}
nonfunctional_ppp <-as(nonfunctional_sp, "ppp")
nonfunctional_ppp
```

Now, let us plot functional_ppp and examine the difference.

```{r}
plot(functional_ppp)
```

You can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.

```{r}
summary(functional_ppp)
```

### 6.3 Analysing Spatial Point Process Using L-Function

In this section, you will learn how to compute L-function estimation by using *Lest()* of **spatstat** package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.

##### 6.3.1 Functional Water Point

###### 6.3.1.1 Computing L-Function Estimation

```{r}
L_f = Lest(functional_ppp, correction = "Ripley")
plot(L_f, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

The plot above reveals that there is a sign that the distribution of Functional Water Point are not randomly distributed. However, a hypothesis test is required to confirm the observation statistically.

###### 6.3.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of Functional Water Point are randomly distributed.

H1= The distribution of Functional Water Point are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with L-function.

```{r}
L_f.csr = envelope(functional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)
```

```{r}
plot(L_f.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

The plot above reveals that the are signs that the distribution of Functional Water Point are not randomly distributed. Unfortunately, we failed to reject the null hypothesis because the empirical k-cross line is within the envelop of the 95% confident interval.

##### 6.3.2 Non-Functional Water Point

###### 6.3.2.1 Computing L-Function Estimation

```{r}
L_nf = Lest(nonfunctional_ppp, correction = "Ripley")
plot(L_nf, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

The plot above reveals that there is a sign that the distribution of Non-Functional Water Point are not randomly distributed. However, a hypothesis test is required to confirm the observation statistically.

###### 6.3.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of Non-Functional Water Point are randomly distributed.

H1= The distribution of Non-Functional Water Point are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with L-function.

```{r}
L_nf.csr = envelope(nonfunctional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)
```

```{r}
plot(L_nf.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

The plot above reveals that the are signs that the distribution of Non-Functional Water Point are not randomly distributed. Unfortunately, we failed to reject the null hypothesis because the empirical k-cross line is within the envelop of the 95% confident interval.

## 7 Spatial Correlation Analysis

In this section, we will confirm statistically if the spatial distribution of functional and non-functional water points are independent from each other.

### 7.1 Local Colocation Quotient Analysis (LCLQ)

##### 7.1.1 Visualising the sf layers

Using the appropriate functions of `tmap`, we will be able to view the functional and non-functional water points on a single map.

```{r eval=FALSE}
tmap_mode("view")
tm_shape(NGA_wp) +
  tm_polygons() +
tm_shape(wp_sf_nga)+ 
  tm_dots(col = "status_clean",
             size = 0.01,
             border.col = "black",
             border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(5, 16))
```

![](7-1.PNG)

Notice that there are many categories for water point. For this exercise, we will have to combine all functional water point and non-functional water point into their own categories.

First, we will duplicate *status_clean* column.

```{r}
wp_sf_nga$category <- wp_sf_nga$status_clean
wp_sf_nga
```

Next, we will have to change the value of "Functional but not in use" and "Functional but needs repair" into *Functional*.

```{r}
wp_sf_nga$category[wp_sf_nga$category == "Functional but not in use"] <- "Functional"
wp_sf_nga$category[wp_sf_nga$category == "Functional but needs repair"] <- "Functional"
```

Next, we will do the same for Non-functional.

```{r}
wp_sf_nga$category[wp_sf_nga$category == "Abandoned/Decommissioned"] <- "Non-Functional"
wp_sf_nga$category[wp_sf_nga$category == "Abandoned"] <- "Non-Functional"
wp_sf_nga$category[wp_sf_nga$category == "Non-Functional due to dry season"] <- "Non-Functional"
wp_sf_nga$category[wp_sf_nga$category == "Non functional due to dry season"] <- "Non-Functional"
```

We will run tmap again to view the data.

```{r eval=FALSE}
tmap_mode("view")
tm_shape(NGA_wp) +
  tm_polygons() +
tm_shape(wp_sf_nga)+ 
  tm_dots(col = "category",
             size = 0.01,
             border.col = "black",
             border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(5, 16))
```

![](7-1-2.PNG)

##### 7.1.2 Preparing nearest Neighbours List

In the code chunk below, `st_knn()` of **sfdep** package is used to determine the k (i.e. 6) nearest neighbours for given point geometry.

```{r}
nb <- include_self(
  st_knn(st_geometry(wp_sf_nga), 6))
```

##### 7.1.3 Computing Kernal Weights

In the code chunk below, `st_kernel_weights()` of **sfdep** package is used to derive a weights list by using a kernel function.

```{r}
wt <- st_kernel_weights(nb, 
                        wp_sf_nga, 
                        "gaussian", 
                        adaptive = TRUE)
```

For this to work: - an object of class nb e.g. created by using either `st_contiguity()` or `st_knn()` is required. - The supported kernel methods are: "uniform", "gaussian", "triangular", "epanechnikov", or "quartic".

##### 7.1.4 Preparing the Vector List

To compute LCLQ by using **sfdep** package, the reference point data must be in either character or vector list. The code chunks below are used to prepare two vector lists. One of Functional and for Non-Functional and are called A and B respectively.

```{r}
functional <- wp_sf_nga %>%
  filter(category == "Functional")
A <- functional$category
```

```{r}
non_functional <- wp_sf_nga %>%
  filter(category == "Non-Functional")
B <- non_functional$category
```
